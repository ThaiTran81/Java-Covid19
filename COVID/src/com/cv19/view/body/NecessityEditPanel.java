/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.cv19.view.body;

import Controller.CovidDAO;
import Controller.HistoryDAO;
import Model.NecessityModel;
import com.microsoft.sqlserver.jdbc.SQLServerException;
import java.awt.Color;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author ThaiTran
 */
public class NecessityEditPanel extends javax.swing.JPanel {

    /**
     * Creates new form NecessityEditPanel
     */
    private String limitTime[] = {"ngày", "tuần", "tháng"};
    NecessityModel model;

    public NecessityEditPanel(int id) {
        try {
            model = new CovidDAO().getNecessityByID(id);
            initComponents();
            comboTime.setModel(new DefaultComboBoxModel(limitTime));

            txtID.setText(model.getId() + "");
            txtNamePack.setText(model.getName());
            txtPrice.setText(model.getPrice() + "");
            spLimitIn.setValue(model.getLimit());
            comboTime.setSelectedIndex(getIndexUnit());
        } catch (SQLServerException ex) {
            Logger.getLogger(NecessityEditPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NecessityEditPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    int getIndexUnit() {
        int unit = model.getTime_limit();
        if (unit == 7) {
            return 1;
        }
        if (unit == 30) {
            return 2;
        }

        return 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panelInput = new javax.swing.JPanel();
        lbPackIn = new javax.swing.JLabel();
        txtNamePack = new javax.swing.JTextField();
        lbLimitIn = new javax.swing.JLabel();
        spLimitIn = new javax.swing.JSpinner();
        lbTimeIn = new javax.swing.JLabel();
        comboTime = new javax.swing.JComboBox<>();
        btnUpdate = new javax.swing.JButton();
        lbPrice = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        lbPackIn1 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        btnDel = new javax.swing.JButton();
        lbNotify = new javax.swing.JTextArea();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        panelInput.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        panelInput.setLayout(new java.awt.GridBagLayout());

        lbPackIn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbPackIn.setText("Tên gói :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        panelInput.add(lbPackIn, gridBagConstraints);

        txtNamePack.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 10, 4, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 0);
        panelInput.add(txtNamePack, gridBagConstraints);

        lbLimitIn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbLimitIn.setText("Mức giới hạn :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        panelInput.add(lbLimitIn, gridBagConstraints);

        spLimitIn.setPreferredSize(new java.awt.Dimension(30, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 0);
        panelInput.add(spLimitIn, gridBagConstraints);

        lbTimeIn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbTimeIn.setText("Thời gian giới hạn theo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        panelInput.add(lbTimeIn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 0);
        panelInput.add(comboTime, gridBagConstraints);

        btnUpdate.setText("Cập nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelInput.add(btnUpdate, gridBagConstraints);

        lbPrice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbPrice.setText("Giá tiền:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        panelInput.add(lbPrice, gridBagConstraints);

        txtPrice.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 10, 4, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 0);
        panelInput.add(txtPrice, gridBagConstraints);

        lbPackIn1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbPackIn1.setText("ID:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        panelInput.add(lbPackIn1, gridBagConstraints);

        txtID.setEditable(false);
        txtID.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 10, 4, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 0);
        panelInput.add(txtID, gridBagConstraints);

        btnDel.setText("Xoá");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelInput.add(btnDel, gridBagConstraints);

        lbNotify.setEditable(false);
        lbNotify.setColumns(20);
        lbNotify.setLineWrap(true);
        lbNotify.setRows(2);
        lbNotify.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelInput.add(lbNotify, gridBagConstraints);

        add(panelInput);
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (txtNamePack.getText().isBlank() || txtPrice.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "Vui lòng điền đầy đủ tên và giá tiền", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        model.setName(txtNamePack.getText());
        model.setLimit((int) spLimitIn.getValue());
        model.setPrice(Integer.parseInt(txtPrice.getText()));
        model.setTime_limit(getUnit());
        updateToDB();
    }//GEN-LAST:event_btnUpdateActionPerformed

    void updateToDB() {
        try {
            String sql = "UPDATE NECESSITIES "
                    + "SET NAME = ?"
                    + "   ,LIMIT = ?"
                    + "   ,PRICE = ?"
                    + "   ,TIME_LIMIT = ? "
                    + "WHERE ID_NECESSITIES = ?";
            Object params[] = {model.getName(), model.getLimit(), model.getPrice(), model.getTime_limit(), model.getId()};
            new CovidDAO().executeUpdate(sql, params);
            successNotify("Cập nhật thành công");
            HistoryDAO.AddHistory("Đã cập nhật lại gói nhu yếu phẩm " + model.getName()+" ["+model.getId()+"]");
        } catch (SQLServerException ex) {
            failedNotify();
        } catch (SQLException ex) {
            failedNotify();
        }
    }
    
    void delToDB() {
        try {
            String sql = "UPDATE NECESSITIES "
                    + "SET deleted = 1 "
                    + "WHERE ID_NECESSITIES = ?";
            Object params[] = {model.getId()};
            new CovidDAO().executeUpdate(sql, params);
            successNotify("Xoá thành công");
            HistoryDAO.AddHistory("Đã xoá gói nhu yếu phẩm: " +model.getName()+"["+model.getId()+"]");
        } catch (SQLServerException ex) {
            System.out.print(ex);
            failedNotify();
        } catch (SQLException ex) {
            failedNotify();
        }
        btnDel.setEnabled(false);
        btnUpdate.setEnabled(false);
    }

    void failedNotify(){
        lbNotify.setText("");
        lbNotify.setForeground(Color.red);
        lbNotify.setText("Thao tác không thành công, sản phẩm không còn tồn tại hoặc đã có lỗi xảy ra");
       
    }
    
    void successNotify(String msg){
        lbNotify.setText("");
        if(msg ==null) msg="Thành công";
        lbNotify.setForeground(Color.green);
        lbNotify.setText(msg);
        
    }
    int getUnit() {
        if (comboTime.getSelectedIndex() == 0) {
            return 1;
        }
        if (comboTime.getSelectedIndex() == 1) {
            return 7;
        }
        return 30;
    }
    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
       delToDB();
    }//GEN-LAST:event_btnDelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboTime;
    private javax.swing.JLabel lbLimitIn;
    private javax.swing.JTextArea lbNotify;
    private javax.swing.JLabel lbPackIn;
    private javax.swing.JLabel lbPackIn1;
    private javax.swing.JLabel lbPrice;
    private javax.swing.JLabel lbTimeIn;
    private javax.swing.JPanel panelInput;
    private javax.swing.JSpinner spLimitIn;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNamePack;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables
}
