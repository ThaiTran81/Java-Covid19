USE QLC19
  GO

DROP PROC AddNewAccount
go
CREATE PROCEDURE AddNewAccount (@ID VARCHAR(15), @PASSWORD VARBINARY(64), @ROLE INT, @FULLNAME NVARCHAR(100)=NULL,
  @PHONENUMBER VARCHAR(20)=NULL, @DOB DATE=NULL, @GENDER NVARCHAR(5)=NULL, @PROVINE NVARCHAR(50)=NULL, 
  @DISTRICT NVARCHAR(50)=NULL, @VILLAGE NVARCHAR(50)=NULL, @ID_QUARATINE INT=NULL, @RELATED VARCHAR(15)=NULL, @F_KIND VARCHAR(5) )
AS 
BEGIN
      DECLARE @ID_BANK INT;
      SET @ID_BANK = NULL;
      IF @ROLE = 2 BEGIN 
        INSERT INTO PAYMENT(BALANCE) VALUES (20000000);
        Set @ID_BANK = (SELECT SCOPE_IDENTITY());
      END
     INSERT INTO PROFILE(ID, FULLNAME, PHONENUMBER, DOB, GENDER, PROVINE, DISTRICT, VILLAGE, ID_BANK, F_STATUS, RELATED_USER)
     VALUES(@ID, @FULLNAME,@PHONENUMBER,@DOB, @GENDER ,@PROVINE,@DISTRICT,@VILLAGE, @ID_BANK, @F_KIND, @RELATED)

     INSERT INTO ACCOUNT(USERNAME, PASSWORD, TYPE)
     VALUES(@ID, @PASSWORD,@ROLE)
     
END;

GO


DROP TRIGGER trigger_sub_consumption
CREATE TRIGGER trigger_sub_consumption
ON CONSUME
FOR DELETE
AS
BEGIN
	UPDATE n
  SET n.CONSUMPTION=n.CONSUMPTION-de.QUANTITY
  FROM NECESSITIES n JOIN DELETED de ON n.ID_NECESSITIES = de.ID_NECESSITIES
END

--tự động thêm giá vào chi tiết hoá đơn
DROP TRIGGER trigger_add_price
CREATE TRIGGER trigger_add_price
ON CONSUME
FOR INSERT
AS
BEGIN

  UPDATE n
  SET CONSUMPTION = n.CONSUMPTION + (i.QUANTITY)
  FROM NECESSITIES n
  JOIN INSERTED i
    ON n.ID_NECESSITIES = i.ID_NECESSITIES

  UPDATE c
  SET c.PRICE = n.PRICE
  FROM CONSUME c
  JOIN INSERTED i
    ON c.ID_BILL = i.ID_BILL
    AND c.ID_NECESSITIES = i.ID_NECESSITIES
  JOIN NECESSITIES n
    ON c.ID_NECESSITIES = n.ID_NECESSITIES
END


DROP TRIGGER trigger_Insert_Profile
CREATE TRIGGER trigger_Insert_Profile
ON PROFILE
FOR INSERT
AS
BEGIN
	INSERT INTO F_HISTORY (USER_ID, F_KIND, F_DATE, Related_User, ID_QUARATINE)
  SELECT ID,F_STATUS, GETDATE(), Related_User, ID_QUARATINE FROM INSERTED WHERE DATALENGTH(F_STATUS) > 0
END


CREATE TRIGGER trigger_Update_Profile
ON PROFILE
FOR UPDATE
AS
BEGIN
	INSERT INTO F_HISTORY (USER_ID, F_KIND, F_DATE, Related_User, ID_QUARATINE)
  SELECT i.ID,i.F_STATUS, GETDATE(), i.Related_User, i.ID_QUARATINE 
    FROM INSERTED i JOIN DELETED de ON i.ID = de.ID 
    WHERE DATALENGTH(i.F_STATUS) > 0 AND (i.F_STATUS != de.F_STATUS OR i.ID_QUARATINE != de.ID_QUARATINE) 
END


SELECT TRY_CONVERT(DATE,fh.F_DATE)'time', F_KIND 'status', COUNT(*) 'quantity'
FROM dbo.F_HISTORY fh
GROUP BY TRY_CONVERT(DATE,fh.F_DATE),  F_KIND
ORDER BY TRY_CONVERT(DATE,fh.F_DATE)


